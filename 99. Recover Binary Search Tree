You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Code1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int idx = 0;
public:
    void solveIn(TreeNode* root, vector<int> &inorder) {
        if(!root) return;
        solveIn(root->left, inorder);
        inorder.push_back(root->val);
        solveIn(root->right, inorder);
    }
    void helper(TreeNode* root, vector<int> &vals, int val1, int val2) {
        if(!root) return;
        helper(root->left, vals, val1, val2);
        if(root->val == val1) {
            root->val = val2;
        } else if(root->val == val2){
            root->val = val1;
        }
        helper(root->right, vals, val1, val2);
    }
    void recoverTree(TreeNode* root) {
        vector<int> inorder;
        int flag = 0;
        solveIn(root, inorder);
        vector<int> sortAr = inorder;
        vector<int> vals;
        sort(sortAr.begin(), sortAr.end());
        int val1, val2;
        for(int i = 0; i < inorder.size(); ++i) {
            if(sortAr[i] != inorder[i] && !flag) {
                val1 = inorder[i];
                flag = 1;
            } else if(sortAr[i] != inorder[i] && flag) {
                val2 = inorder[i];
            }
        }
        helper(root, vals, val1, val2);
    }
};

Code2:
class Solution {
public:
    // Perform an inorder traversal and find the swapped values
    void solveIn(TreeNode* root, TreeNode*& first, TreeNode*& second, TreeNode*& prev) {
        if (!root) return;

        solveIn(root->left, first, second, prev);

        // If previous node is greater than current node, we have found a swapped node
        if (prev && prev->val > root->val) {
            if (!first) {
                first = prev;  // First swapped node
            }
            second = root;  // Second swapped node
        }
        prev = root;  // Update previous node

        solveIn(root->right, first, second, prev);
    }

    void recoverTree(TreeNode* root) {
        TreeNode* first = nullptr;
        TreeNode* second = nullptr;
        TreeNode* prev = nullptr;

        // Find the two nodes that were swapped
        solveIn(root, first, second, prev);

        // Swap the values of the two nodes
        if (first && second) {
            swap(first->val, second->val);
        }
    }
};
