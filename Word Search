You are given a two-dimensional mat[][] of size n*m containing English alphabets and a string word. Check if the word exists on the mat. The word can be constructed by using letters from adjacent cells, either horizontally or vertically. The same cell cannot be used more than once.

class Solution {
private:
    vector<int> drx = {-1, 0, 1, 0};  // Directions: Up, Left, Down, Right
    vector<int> dry = {0, -1, 0, 1};  

public:
    bool dfs(vector<vector<char>>& mat, string word, int row, int col, int index, vector<vector<bool>>& visited) {
        if(index == word.size()) return true; // word found
        int n = mat.size();
        int m = mat[0].size();
        // check if the row and column are valid
        // check if the cell has been already visited
        // check if the character in the cell in valid
        if(row < 0 || row >= n || col < 0 || col >= m || visited[row][col] || mat[row][col] != word[index]) return false;
        // visit the cell
        visited[row][col] = true;
        // traverse through the adjacent neighbours
        for(int d = 0; d < 4; ++d) {
            int newRow = row + drx[d];
            int newCol = col + dry[d];
            // check if the adjacent word is a valid word
            if(dfs(mat, word, newRow, newCol, index+1, visited)) return true;
        }
        // if not valid backtrack
        visited[row][col] = false;
        return false;
    }

    bool isWordExist(vector<vector<char>>& mat, string word) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        // check for all the characters in the matrix
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < m; ++j) {
                // check if the current letter matches the first character
                if(mat[i][j] == word[0]) {
                    // if word found
                    if(dfs(mat, word, i, j, 0, visited)) return true;
                }
            }
        }
        return false;
    }
};

Imp:
if(index == word.size()) return true; // word found
mat[row][col] != word[index]
visited[row][col] = false;
if(mat[i][j] == word[0])
