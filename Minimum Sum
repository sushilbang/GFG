#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string minSum(vector<int>& arr) {
        string a = "";
        string b = "";
        
        // Sort the array to ensure we get the smallest possible numbers
        sort(arr.begin(), arr.end());
        
        // Distribute digits alternately between the two numbers
        for (int i = 0; i < arr.size(); i++) {
            if (i % 2 == 0) {
                a += to_string(arr[i]);
            } else {
                b += to_string(arr[i]);
            }
        }
        
        // Add the two strings as numbers without converting them to int
        string result = addStrings(a, b);
        
        // Remove leading zeroes from the result
        int pos = 0;
        while (pos < result.size() && result[pos] == '0') {
            pos++;
        }
        return pos == result.size() ? "0" : result.substr(pos);
    }
    
private:
    // Function to add two string numbers
    string addStrings(string num1, string num2) {
        string result = "";
        int carry = 0, i = num1.size() - 1, j = num2.size() - 1;
        
        while (i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) sum += num1[i--] - '0';
            if (j >= 0) sum += num2[j--] - '0';
            result += to_string(sum % 10);
            carry = sum / 10;
        }
        
        // Reverse the result since we added digits from the end
        reverse(result.begin(), result.end());
        return result;
    }
};
