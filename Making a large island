You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

Code:

class Solution(object):
    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        from collections import defaultdict
        
        n = len(grid)
        island_sizes = {}  # Maps island ID -> size
        island_id = 2  # Start island IDs from 2 (to differentiate from 1)
        
        # DFS to compute island size and mark the grid
        def dfs(i, j, island_id):
            if i < 0 or j < 0 or i >= n or j >= n or grid[i][j] != 1:
                return 0
            grid[i][j] = island_id
            return 1 + dfs(i+1, j, island_id) + dfs(i-1, j, island_id) + dfs(i, j+1, island_id) + dfs(i, j-1, island_id)
        
        # Step 1: Find all islands and assign them unique IDs
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    island_sizes[island_id] = dfs(i, j, island_id)
                    island_id += 1

        # Step 2: Find the largest island already present
        max_island = max(island_sizes.values(), default=0)

        # Step 3: Try flipping each '0' and compute possible island size
        directions = [(0,1), (1,0), (0,-1), (-1,0)]
        
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen_islands = set()
                    new_size = 1  # Flip this zero to one
                    
                    for dx, dy in directions:
                        ni, nj = i + dx, j + dy
                        if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] > 1:
                            seen_islands.add(grid[ni][nj])
                    
                    for island in seen_islands:
                        new_size += island_sizes[island]
                    
                    max_island = max(max_island, new_size)

        return max_island
