class Solution {
    public:
        int minRepeats(string& s1, string& s2) {
            int l1 = s1.length();
            int l2 = s2.length();
            
            string repeated_s1 = s1;
            int count = 1;
            
            // Keep appending s1 until the length of repeated_s1 is at least as long as s2
            while (repeated_s1.length() < l2) {
                repeated_s1 += s1;
                count++;
            }
            
            // Check if s2 is a substring of repeated_s1
            if (repeated_s1.find(s2) != string::npos) {
                return count;
            }
            
            // Append one more s1 if necessary and check again
            repeated_s1 += s1;
            if (repeated_s1.find(s2) != string::npos) {
                return count + 1;
            }
            
            // If s2 is still not a substring, return -1
            return -1;
        }
};
